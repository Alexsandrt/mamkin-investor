// <auto-generated />
using System;
using System.Collections.Generic;
using Mamkin.In.Domain;
using Mamkin.In.Infrastructure.Ef;
using Mamkin.In.WebApi.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mamkin.In.WebApi.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240716191003_AddForecastedOffset")]
    partial class AddForecastedOffset
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mamkin.In.Domain.PredefinedSymbol", b =>
                {
                    b.Property<string>("Symbol")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("symbol");

                    b.Property<TimeSpan?>("ForecastedSellOffset")
                        .HasColumnType("interval")
                        .HasColumnName("forecasted_sell_offset");

                    b.HasKey("Symbol")
                        .HasName("pk_selected_symbols");

                    b.ToTable("selected_symbols", (string)null);
                });

            modelBuilder.Entity("Mamkin.In.Domain.Trade", b =>
                {
                    b.Property<Guid>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("trade_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CurrentProfit")
                        .HasColumnType("numeric")
                        .HasColumnName("current_profit");

                    b.Property<string>("FailReason")
                        .HasColumnType("text")
                        .HasColumnName("fail_reason");

                    b.Property<DateTime?>("ForecastedSellDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("forecasted_sell_date");

                    b.Property<decimal>("HeldCoinsCount")
                        .HasColumnType("numeric")
                        .HasColumnName("held_coins_count");

                    b.Property<IEnumerable<TradeOrder>>("History")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("history");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("TradeId")
                        .HasName("pk_trades");

                    b.ToTable("trades", (string)null);
                });

            modelBuilder.Entity("Mamkin.In.WebApi.Infrastructure.Database.DbTradeEvent", b =>
                {
                    b.Property<long>("DbTradeEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("db_trade_event_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("DbTradeEventId"));

                    b.Property<object>("Data")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("DbTradeEventId")
                        .HasName("pk_trade_events");

                    b.ToTable("trade_events", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
