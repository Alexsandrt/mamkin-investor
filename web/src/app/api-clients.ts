//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class DashboardClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5083";
    }

    getBalance(): Observable<BybitBalance> {
        let url_ = this.baseUrl + "/api/dashboard/balance";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBalance(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBalance(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BybitBalance>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BybitBalance>;
        }));
    }

    protected processGetBalance(response: HttpResponseBase): Observable<BybitBalance> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BybitBalance.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class SystemClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5083";
    }

    test(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/test";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTest(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processTest(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTickers(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/tickers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTickers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTickers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processGetTickers(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    ping(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/ping";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPing(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPing(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processPing(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TimeSeriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5083";
    }

    getTimeSeries(symbol: string | undefined, range: string | undefined, interval: string | undefined): Observable<SymbolPrice[]> {
        let url_ = this.baseUrl + "/api/time-series?";
        if (symbol === null)
            throw new Error("The parameter 'symbol' cannot be null.");
        else if (symbol !== undefined)
            url_ += "symbol=" + encodeURIComponent("" + symbol) + "&";
        if (range === null)
            throw new Error("The parameter 'range' cannot be null.");
        else if (range !== undefined)
            url_ += "range=" + encodeURIComponent("" + range) + "&";
        if (interval === null)
            throw new Error("The parameter 'interval' cannot be null.");
        else if (interval !== undefined)
            url_ += "interval=" + encodeURIComponent("" + interval) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTimeSeries(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTimeSeries(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SymbolPrice[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SymbolPrice[]>;
        }));
    }

    protected processGetTimeSeries(response: HttpResponseBase): Observable<SymbolPrice[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SymbolPrice.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TradesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5083";
    }

    getTrades(query: TradesQuery): Observable<PagedDataOfTradesTableItem> {
        let url_ = this.baseUrl + "/api/trades";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTrades(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTrades(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PagedDataOfTradesTableItem>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PagedDataOfTradesTableItem>;
        }));
    }

    protected processGetTrades(response: HttpResponseBase): Observable<PagedDataOfTradesTableItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedDataOfTradesTableItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTradeEvents(query: TradeEventsQuery): Observable<PagedDataOfObject> {
        let url_ = this.baseUrl + "/api/trade-events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTradeEvents(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTradeEvents(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PagedDataOfObject>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PagedDataOfObject>;
        }));
    }

    protected processGetTradeEvents(response: HttpResponseBase): Observable<PagedDataOfObject> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedDataOfObject.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    calcProfit(): Observable<string> {
        let url_ = this.baseUrl + "/api/trades/profit";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCalcProfit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCalcProfit(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCalcProfit(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

/** Balance info */
export class BybitBalance implements IBybitBalance {
    /** Account type */
    accountType?: AccountType;
    /** Account LTV */
    accountLtv?: number | undefined;
    /** Account initial margin rate */
    accountInitialMarginRate?: number | undefined;
    /** Account maintenance margin rate */
    accountMaintenanceMarginRate?: number | undefined;
    /** Account equity in USD */
    totalEquity?: number | undefined;
    /** Total wallet balance in USD */
    totalWalletBalance?: number | undefined;
    /** Total margin balance in USD */
    totalMarginBalance?: number | undefined;
    /** Total available balance in USD */
    totalAvailableBalance?: number | undefined;
    /** Unrealized profit and loss in USD */
    totalPerpUnrealizedPnl?: number | undefined;
    /** Iniital margin in USD */
    totalInitialMargin?: number | undefined;
    /** Maintenance margin in USD */
    totalMaintenanceMargin?: number | undefined;
    /** Asset info */
    assets?: BybitAssetBalance[];

    constructor(data?: IBybitBalance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountType = _data["accountType"];
            this.accountLtv = _data["accountLtv"];
            this.accountInitialMarginRate = _data["accountInitialMarginRate"];
            this.accountMaintenanceMarginRate = _data["accountMaintenanceMarginRate"];
            this.totalEquity = _data["totalEquity"];
            this.totalWalletBalance = _data["totalWalletBalance"];
            this.totalMarginBalance = _data["totalMarginBalance"];
            this.totalAvailableBalance = _data["totalAvailableBalance"];
            this.totalPerpUnrealizedPnl = _data["totalPerpUnrealizedPnl"];
            this.totalInitialMargin = _data["totalInitialMargin"];
            this.totalMaintenanceMargin = _data["totalMaintenanceMargin"];
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(BybitAssetBalance.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BybitBalance {
        data = typeof data === 'object' ? data : {};
        let result = new BybitBalance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountType"] = this.accountType;
        data["accountLtv"] = this.accountLtv;
        data["accountInitialMarginRate"] = this.accountInitialMarginRate;
        data["accountMaintenanceMarginRate"] = this.accountMaintenanceMarginRate;
        data["totalEquity"] = this.totalEquity;
        data["totalWalletBalance"] = this.totalWalletBalance;
        data["totalMarginBalance"] = this.totalMarginBalance;
        data["totalAvailableBalance"] = this.totalAvailableBalance;
        data["totalPerpUnrealizedPnl"] = this.totalPerpUnrealizedPnl;
        data["totalInitialMargin"] = this.totalInitialMargin;
        data["totalMaintenanceMargin"] = this.totalMaintenanceMargin;
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        return data;
    }
}

/** Balance info */
export interface IBybitBalance {
    /** Account type */
    accountType?: AccountType;
    /** Account LTV */
    accountLtv?: number | undefined;
    /** Account initial margin rate */
    accountInitialMarginRate?: number | undefined;
    /** Account maintenance margin rate */
    accountMaintenanceMarginRate?: number | undefined;
    /** Account equity in USD */
    totalEquity?: number | undefined;
    /** Total wallet balance in USD */
    totalWalletBalance?: number | undefined;
    /** Total margin balance in USD */
    totalMarginBalance?: number | undefined;
    /** Total available balance in USD */
    totalAvailableBalance?: number | undefined;
    /** Unrealized profit and loss in USD */
    totalPerpUnrealizedPnl?: number | undefined;
    /** Iniital margin in USD */
    totalInitialMargin?: number | undefined;
    /** Maintenance margin in USD */
    totalMaintenanceMargin?: number | undefined;
    /** Asset info */
    assets?: BybitAssetBalance[];
}

/** Account type */
export enum AccountType {
    Contract = 0,
    Spot = 1,
    Investment = 2,
    CopyTrading = 3,
    Option = 4,
    Fund = 5,
    Unified = 6,
}

/** Asset balance info */
export class BybitAssetBalance implements IBybitAssetBalance {
    /** Asset name */
    asset?: string;
    /** Asset equity */
    equity?: number | undefined;
    /** Asset usd value */
    usdValue?: number | undefined;
    /** Asset balance */
    walletBalance?: number;
    /** [Spot] Available balance */
    free?: number | undefined;
    /** [Spot] Locked balance */
    locked?: number | undefined;
    /** Borrow amount */
    borrowAmount?: number | undefined;
    /** Available borrow amount */
    availableToBorrow?: number | undefined;
    /** Available withdrawal amount */
    availableToWithdraw?: number | undefined;
    /** Accrued interest */
    accruedInterest?: number | undefined;
    /** Total order initial margin */
    totalOrderInitialMargin?: number | undefined;
    /** Total position maintenance marging */
    totalPositionInitialMargin?: number | undefined;
    /** Total position maintenance margin */
    totalPositionMaintenanceMargin?: number | undefined;
    /** Unrealized profit and loss */
    unrealizedPnl?: number | undefined;
    /** Realized profit and loss */
    realizedPnl?: number | undefined;
    /** [Unified] Bonus */
    bonus?: number | undefined;

    constructor(data?: IBybitAssetBalance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"];
            this.equity = _data["equity"];
            this.usdValue = _data["usdValue"];
            this.walletBalance = _data["walletBalance"];
            this.free = _data["free"];
            this.locked = _data["locked"];
            this.borrowAmount = _data["borrowAmount"];
            this.availableToBorrow = _data["availableToBorrow"];
            this.availableToWithdraw = _data["availableToWithdraw"];
            this.accruedInterest = _data["accruedInterest"];
            this.totalOrderInitialMargin = _data["totalOrderInitialMargin"];
            this.totalPositionInitialMargin = _data["totalPositionInitialMargin"];
            this.totalPositionMaintenanceMargin = _data["totalPositionMaintenanceMargin"];
            this.unrealizedPnl = _data["unrealizedPnl"];
            this.realizedPnl = _data["realizedPnl"];
            this.bonus = _data["bonus"];
        }
    }

    static fromJS(data: any): BybitAssetBalance {
        data = typeof data === 'object' ? data : {};
        let result = new BybitAssetBalance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset;
        data["equity"] = this.equity;
        data["usdValue"] = this.usdValue;
        data["walletBalance"] = this.walletBalance;
        data["free"] = this.free;
        data["locked"] = this.locked;
        data["borrowAmount"] = this.borrowAmount;
        data["availableToBorrow"] = this.availableToBorrow;
        data["availableToWithdraw"] = this.availableToWithdraw;
        data["accruedInterest"] = this.accruedInterest;
        data["totalOrderInitialMargin"] = this.totalOrderInitialMargin;
        data["totalPositionInitialMargin"] = this.totalPositionInitialMargin;
        data["totalPositionMaintenanceMargin"] = this.totalPositionMaintenanceMargin;
        data["unrealizedPnl"] = this.unrealizedPnl;
        data["realizedPnl"] = this.realizedPnl;
        data["bonus"] = this.bonus;
        return data;
    }
}

/** Asset balance info */
export interface IBybitAssetBalance {
    /** Asset name */
    asset?: string;
    /** Asset equity */
    equity?: number | undefined;
    /** Asset usd value */
    usdValue?: number | undefined;
    /** Asset balance */
    walletBalance?: number;
    /** [Spot] Available balance */
    free?: number | undefined;
    /** [Spot] Locked balance */
    locked?: number | undefined;
    /** Borrow amount */
    borrowAmount?: number | undefined;
    /** Available borrow amount */
    availableToBorrow?: number | undefined;
    /** Available withdrawal amount */
    availableToWithdraw?: number | undefined;
    /** Accrued interest */
    accruedInterest?: number | undefined;
    /** Total order initial margin */
    totalOrderInitialMargin?: number | undefined;
    /** Total position maintenance marging */
    totalPositionInitialMargin?: number | undefined;
    /** Total position maintenance margin */
    totalPositionMaintenanceMargin?: number | undefined;
    /** Unrealized profit and loss */
    unrealizedPnl?: number | undefined;
    /** Realized profit and loss */
    realizedPnl?: number | undefined;
    /** [Unified] Bonus */
    bonus?: number | undefined;
}

export class SymbolPrice implements ISymbolPrice {
    time?: string;
    price?: number;

    constructor(data?: ISymbolPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.time = _data["time"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): SymbolPrice {
        data = typeof data === 'object' ? data : {};
        let result = new SymbolPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["time"] = this.time;
        data["price"] = this.price;
        return data;
    }
}

export interface ISymbolPrice {
    time?: string;
    price?: number;
}

export class PagedDataOfTradesTableItem implements IPagedDataOfTradesTableItem {
    page!: number;
    pageSize!: number;
    totalCount!: number;
    items!: TradesTableItem[];

    constructor(data?: IPagedDataOfTradesTableItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TradesTableItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedDataOfTradesTableItem {
        data = typeof data === 'object' ? data : {};
        let result = new PagedDataOfTradesTableItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPagedDataOfTradesTableItem {
    page: number;
    pageSize: number;
    totalCount: number;
    items: TradesTableItem[];
}

export class TradesTableItem implements ITradesTableItem {
    tradeId?: string;
    tradingPair?: string;
    createdAt?: Date;
    heldCoinsCount?: number;
    currentProfit?: number;
    state?: TradeState;
    orders?: TradeOrder[];

    constructor(data?: ITradesTableItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tradeId = _data["tradeId"];
            this.tradingPair = _data["tradingPair"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.heldCoinsCount = _data["heldCoinsCount"];
            this.currentProfit = _data["currentProfit"];
            this.state = _data["state"];
            if (Array.isArray(_data["orders"])) {
                this.orders = [] as any;
                for (let item of _data["orders"])
                    this.orders!.push(TradeOrder.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TradesTableItem {
        data = typeof data === 'object' ? data : {};
        let result = new TradesTableItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tradeId"] = this.tradeId;
        data["tradingPair"] = this.tradingPair;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["heldCoinsCount"] = this.heldCoinsCount;
        data["currentProfit"] = this.currentProfit;
        data["state"] = this.state;
        if (Array.isArray(this.orders)) {
            data["orders"] = [];
            for (let item of this.orders)
                data["orders"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITradesTableItem {
    tradeId?: string;
    tradingPair?: string;
    createdAt?: Date;
    heldCoinsCount?: number;
    currentProfit?: number;
    state?: TradeState;
    orders?: TradeOrder[];
}

export enum TradeState {
    Created = 0,
    Opened = 1,
    IsSold = 2,
    Closed = 3,
    Failed = 4,
}

export class TradeOrder implements ITradeOrder {
    tradeOrderId?: string;
    createdAt?: Date;
    actualAveragePrice?: number | undefined;
    quantity?: number;
    quantityFilled?: number | undefined;
    executedFee?: number | undefined;
    valueFilled?: number | undefined;
    valueRemaining?: number | undefined;
    status?: OrderStatus;
    orderSide?: OrderSide;

    constructor(data?: ITradeOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tradeOrderId = _data["tradeOrderId"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.actualAveragePrice = _data["actualAveragePrice"];
            this.quantity = _data["quantity"];
            this.quantityFilled = _data["quantityFilled"];
            this.executedFee = _data["executedFee"];
            this.valueFilled = _data["valueFilled"];
            this.valueRemaining = _data["valueRemaining"];
            this.status = _data["status"];
            this.orderSide = _data["orderSide"];
        }
    }

    static fromJS(data: any): TradeOrder {
        data = typeof data === 'object' ? data : {};
        let result = new TradeOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tradeOrderId"] = this.tradeOrderId;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["actualAveragePrice"] = this.actualAveragePrice;
        data["quantity"] = this.quantity;
        data["quantityFilled"] = this.quantityFilled;
        data["executedFee"] = this.executedFee;
        data["valueFilled"] = this.valueFilled;
        data["valueRemaining"] = this.valueRemaining;
        data["status"] = this.status;
        data["orderSide"] = this.orderSide;
        return data;
    }
}

export interface ITradeOrder {
    tradeOrderId?: string;
    createdAt?: Date;
    actualAveragePrice?: number | undefined;
    quantity?: number;
    quantityFilled?: number | undefined;
    executedFee?: number | undefined;
    valueFilled?: number | undefined;
    valueRemaining?: number | undefined;
    status?: OrderStatus;
    orderSide?: OrderSide;
}

export enum OrderStatus {
    Created = 0,
    New = 1,
    Rejected = 2,
    PartiallyFilled = 3,
    PartiallyFilledCanceled = 4,
    Filled = 5,
    Cancelled = 6,
    Untriggered = 7,
    Triggered = 8,
    Deactivated = 9,
    Active = 10,
}

export enum OrderSide {
    Buy = 0,
    Sell = 1,
}

export class TradesQuery implements ITradesQuery {
    tradingPair?: string;
    tradeState?: TradeState | undefined;
    page?: number;
    pageSize?: number;

    constructor(data?: ITradesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tradingPair = _data["tradingPair"];
            this.tradeState = _data["tradeState"];
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): TradesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new TradesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tradingPair"] = this.tradingPair;
        data["tradeState"] = this.tradeState;
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface ITradesQuery {
    tradingPair?: string;
    tradeState?: TradeState | undefined;
    page?: number;
    pageSize?: number;
}

export class PagedDataOfObject implements IPagedDataOfObject {
    page!: number;
    pageSize!: number;
    totalCount!: number;
    items!: any[];

    constructor(data?: IPagedDataOfObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(item);
            }
        }
    }

    static fromJS(data: any): PagedDataOfObject {
        data = typeof data === 'object' ? data : {};
        let result = new PagedDataOfObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item);
        }
        return data;
    }
}

export interface IPagedDataOfObject {
    page: number;
    pageSize: number;
    totalCount: number;
    items: any[];
}

export class TradeEventsQuery implements ITradeEventsQuery {
    page?: number;
    pageSize?: number;

    constructor(data?: ITradeEventsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): TradeEventsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new TradeEventsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface ITradeEventsQuery {
    page?: number;
    pageSize?: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}